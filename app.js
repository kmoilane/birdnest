const container = document.getElementsByClassName("container")[0];

/*
 ** Calculates the relative coordinate in the nfz-map based on the given drone coordinate.
 ** Needs to be called separately for the X and for Y coordinates.
 */

function getMapPoint(closest_value) {
    let closestVal = (Number(closest_value) / 2000).toFixed(0);

    if (closestVal < 125) closestVal = 125 - 2 * (125 - Number(closestVal));
    else if (closestVal > 125)
        closestVal = 125 + 2 * (Number(closestVal) - 125);
    return closestVal;
}

/*
 ** Creates new violation-card element and inserts it to the container in the document
 */

function addViolation(violation) {
    let closestX = getMapPoint(violation.closest_x);
    let closestY = getMapPoint(violation.closest_y);

    let closestDist = (Number(violation.closest_distance) / 1000).toFixed(2);
    let newCard = `
			<div title="Image of a Loone sitting on it's nest with a tracking device next to it. Generated by OpenAI DALL-E 2" id=${violation.drone_serial_number} class="violation-card">
				<div class="pilot-data">
					<h2 title="Pilot's name">${violation.pilot_fname} ${violation.pilot_lname}</h2>
					<p title="Pilot's email" class="bold">${violation.pilot_email}</p>
					<p title="Pilot's phone number" class="bold">${violation.pilot_phone_number}</p>
					<p title="Closest confirmed distance from the nest">
						Closest distance: <span class="alerting">${closestDist}</span> meters
					</p>
				</div>
				<div title="Visualization of the closest distance. Circle is NDZ, white dot in the middle is nest and red dot is the drones location." class="nfz-map">
					<div class="birdnest"></div>
					<div class="violation-point" style="left:${closestX}px;bottom:${closestY}px;"></div>
				</div>
			</div>
			`;

    container.insertAdjacentHTML("beforeend", newCard);
}

/*
 ** Checks if the new distance is closer than the old distance,
 ** if so, changes the value and the violation point on the map.
 */

function updateViolation(oldVio, newVio) {
    let oldDist = Number(
        document.querySelector(`#${oldVio.id} .alerting`).innerHTML
    );
    let newDist = Number(newVio.closest_distance / 1000).toFixed(2);
    if (newDist != oldDist) {
        document.querySelector(`#${oldVio.id} .alerting`).innerHTML = newDist;

        let closestX = getMapPoint(newVio.closest_x);
        let closestY = getMapPoint(newVio.closest_y);
        let vioPoint = document.querySelector(
            `#${oldVio.id} .nfz-map .violation-point`
        );
        vioPoint.style.left = `${Number(closestX)}px`;
        vioPoint.style.bottom = `${Number(closestY)}px`;
    }
}

/*
 ** Loops through all the violations and sees if there is a match based on drone_serial_number
 ** If there's no match, violation has expired.
 */

function findMatchingRows(id, violationData) {
    return violationData.find((violation) => {
        return violation.drone_serial_number == id;
    });
}

/*
 ** Deletes expired violation-cards. These drones haven't been seen in 10 minutes or longer,
 ** and therefore are no longer in the database
 */

function deleteViolations(violationData) {
    const cards = document.getElementsByClassName("violation-card");
    let i = 0;
    while (cards[i]) {
        let id = cards[i].id;
        let match = findMatchingRows(id, violationData);

        if (!match) {
            cards[i].remove();
        }
        i++;
    }
}

/*
 ** Parse the violations that are returned from the server.
 */
function parseViolations(violationData) {
    for (const violation of violationData) {
        const existingViolation = document.getElementById(
            violation.drone_serial_number
        );
        if (existingViolation) {
            updateViolation(existingViolation, violation);
        } else {
            addViolation(violation);
        }
    }
    deleteViolations(violationData);
}
