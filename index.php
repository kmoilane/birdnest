<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Birdnest</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<header>
		<h1>Birdnest NDZ violations</h1>
		<nav>
			<a title="View source code in github" href="https://github.com/kmoilane/birdnest" target="_blank"><img src="./github-mark.png" alt="Github"></a>
			<a title="Link to my linkedin" href="https://linkedin.com/in/kmoilane" target="_blank"><img src="./linkedin_icon.png" alt="Linkedin"></a>
		</nav>
	</header>
	<main>
		<div class="container"></div>
		<div class="push"></div>		
	</main>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
	<script>
		const violationTable = document.getElementById("violationTable");
		const violationTableBody = document.getElementById("violationTableBody");
		const container = document.getElementsByClassName("container")[0];

		function getMapPoint(closest_value) {	
			let closestVal = ((Number(closest_value) / 2000).toFixed(0));

			if (closestVal < 125)
				closestVal = 125 - 2 * (125 - Number(closestVal));
			else if (closestVal > 125)
				closestVal = 125 + 2 * (Number(closestVal) - 125);
			return closestVal;
		}

		function addViolation(violation)
		{

			let closestX = getMapPoint(violation.closest_x);
			let closestY = getMapPoint(violation.closest_y);

			let closestDist = (Number(violation.closest_distance) / 1000).toFixed(2);
			let newCard = `
			<div title="Image of a Loone sitting on it's nest with a tracking device next to it. Generated by OpenAI DALL-E 2" id=${violation.drone_serial_number} class="violation-card">
				<div class="pilot-data">
					<h2 title="Pilot's name">${violation.pilot_fname} ${violation.pilot_lname}</h2>
					<p title="Pilot's email" class="bold">${violation.pilot_email}</p>
					<p title="Pilot's phone number" class="bold">${violation.pilot_phone_number}</p>
					<p title="Closest confirmed distance from the nest">
						Closest distance: <span class="alerting">${closestDist}</span> meters
					</p>
				</div>
				<div title="Visualization of the closest distance. Circle is NDZ, white dot in the middle is nest and red dot is the drones location." class="nfz-map">
					<div class="birdnest"></div>
					<div class="violation-point" style="left:${closestX}px;bottom:${closestY}px;"></div>
				</div>
			</div>
			`;

			container.insertAdjacentHTML("beforeend", newCard);
		}

		function updateViolation(oldVio, newVio)
		{
			let oldDist = Number(document.querySelector(`#${oldVio.id} .alerting`).innerHTML);
			let newDist = Number((newVio.closest_distance) / 1000).toFixed(2);
			if (newDist != oldDist) {
				document.querySelector(`#${oldVio.id} .alerting`).innerHTML = newDist;
				
				let closestX = getMapPoint(newVio.closest_x);
				let closestY = getMapPoint(newVio.closest_y);
				let vioPoint = document.querySelector(`#${oldVio.id} .nfz-map .violation-point`);
				vioPoint.style.left = `${Number(closestX)}px`;
				vioPoint.style.bottom = `${Number(closestY)}px`;
			}
		}

		function findMatchingRows(id, violationData)
		{
			return violationData.find((violation) => {
				return (violation.drone_serial_number == id);
			});
		}

		function deleteViolations(violationData)
		{
			const cards = document.getElementsByClassName("violation-card");
			let i = 0;	
			while(cards[i])
			{
				let id = cards[i].id;
				let match = findMatchingRows(id, violationData);
				
				if (!match)
				{
					cards[i].remove();
				}
				i++;
			}
		}

		/* Parse the violations that are returned from server.
		** Either remove those rows that are no longer required,
		** update the changed data inside the row, or add a new
		** row it doesn't currently exist in the table.
		*/
		function handleViolation(violationData)
		{			
			
			// Loop through violationData fetched from server
			for (const violation of violationData)
			{
				// Check if there is already matching violation on table using drone serial number id
				const existingViolation = document.getElementById(violation.drone_serial_number);
				if (existingViolation)
				{
					updateViolation(existingViolation, violation);
				}
				else
				{
					addViolation(violation);
				}
			}
			deleteViolations(violationData);
		}

		function loopAjax() {
			$.ajax({
				type: "POST",
				url: "./app/controllers/Violation.php",
				cache: false
			})
			.done(function(violations){
				handleViolation(violations);
			})
			.fail(function(error){
				console.log("error => ", error);
			});

			setTimeout(loopAjax, 2000);
		}

		$(function() {
			loopAjax();
		});

	</script>
</body>

</html>
